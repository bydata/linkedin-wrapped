---
params:
  username: Ansgar Wolsing
  scrape_reactions: false
  year: 2024
execute:
  echo: false
  message: false
  warning: false
format: 
  pdf:
    latex-engine: xelatex
    geometry: 
      - paperwidth=8in
      - paperheight=8in
      - top=20mm
      - left=20mm
      - right=20mm
      - bottom=5mm
    mainfont: Roboto
    keep-tex: true
    include-in-header:
      - "template.tex"
header-includes:
  - \usepackage{xcolor}
  - \usepackage{tcolorbox}
  - \usepackage{multicol} 
  - \setlength{\columnsep}{1cm}
editor: source
---

\begin{center}
\fontsize{48}{6}\selectfont\textbf{`{r} params$year`}
\end{center}
\begin{center}
\fontsize{32}{6}\selectfont LinkedIn Wrapped
\end{center}


```{r setup}
library(tidyverse)
library(magick)
library(ggtext)
```

```{r scrape-reactions}
#' Scrape reactions if parameter is set to true
#' Calls 01-scrape-reactions.R and passes the start date from the parameter input
#' as an argument

from_date <- as_date(paste(params$year, "01", "01", sep = "-"))
to_date <- as_date(paste(params$year, "12", "31", sep = "-"))
  
if (params$scrape_reactions) {
  source(file.path("..", "R", "01-scrape-reactions.R"))
}

```


```{r custom-theme}

bgcolor <- "#11052F"
fill_gradient_yellow <- grid::linearGradient(c("#FAC123", "#FFD96E"), group = FALSE)
fill_gradient_pink <- grid::linearGradient(c("#A313A8", "#DD00E5"), group = FALSE)

# Custom plot theme
custom_theme <- function(...) {
  theme_minimal() +
  theme(
    plot.background = element_rect(color = "#38216B", fill = "#18083E"),
    plot.margin = margin(t = 12, l = 8, r = 8, b = 8),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#38216B"),
    text = element_text(color = "white"),
    axis.text = element_text(color = "white"),
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    ...
  )  
}

default_bar_width <- 0.82

```

```{r profile-pic-prep, include=FALSE, cache=TRUE}
# Crop the image with {magick} and insert it as PNG

paths_complete_export_zip <- list.files(file.path("..", "data"), pattern = "Complete_LinkedInDataExport_.+\\.zip")
path_complete_export <- file.path("..", "data", "complete_data")
unzip(file.path("..", "data", paths_complete_export_zip[1]), exdir = path_complete_export, 
      files = c("Rich_Media.csv"))

df_richmedia <- read_csv(file.path(path_complete_export, "Rich_Media.csv"),
                         name_repair = janitor::make_clean_names)
profile_photo_url <- df_richmedia |> 
  filter(str_detect(date_time, "profile photo"), str_detect(media_link, "profile-originalphoto")) |> 
  slice_head(n = 1) |> 
  pull(media_link)

# Read the profile image and crop it to a square
profile_photo_path <- file.path("media", "profile-photo.jpeg")
# img <- image_read(file.path("media", "1547825749803.jpeg")) 
download.file(profile_photo_url, destfile = profile_photo_path)
img <- image_read(profile_photo_path) 
ii <- image_info(img)
ii_min <- min(ii$width, ii$height)
img <- image_crop(img, geometry = paste0(ii_min, "x", ii_min, "+0+0"), repage = TRUE)  

# Create a circular mask
mask <- image_blank(width = ii_min,  height = ii_min, color = "none")

mask <- image_draw(mask)
graphics::symbols(x = ii_min / 2, 
                  y = ii_min / 2, 
                  circles = ii_min / 2, 
                  inches = FALSE, 
                  add = TRUE, 
                  bg = "black") 
dev.off()

# Apply the mask
img_circular <- image_composite(img, mask, operator = "copyopacity") |> 
  image_background(bgcolor) |> 
  image_resize("600x600")
image_write(img_circular, "profile-pic-circle.png")

```


![](profile-pic-circle.png){fig-align="left"}

\vspace{-10mm}

```{r}
username <- params$username
```

\begin{center}
`{r} username`
\end{center}

\vspace{-15mm}

```{r load-post-stats, cache=FALSE}
#' Run R/01-scrape-reactions.R first to create the post stats dataset

df_post_stats <- read_csv(file.path("..", "data", "post-stats.csv"))
df_post_stats <- df_post_stats |> 
  mutate(
    datetime = date,
    date = as_date(date),
    month = month(date, label = TRUE)
  ) |> 
  select(datetime, date, everything())

# Calendar of post dates
df_calendar_plot <- df_post_stats |> 
  mutate(
    date = as_date(date)
  ) |> 
  group_by(date) |> 
  summarize(
    n_posts = n(),
    total_reactions = sum(reactions),
    total_comments = sum(comments),
    total_engagements = total_reactions + total_comments
    ) |> 
  complete(
    date = seq(from_date, to_date, "1 day"),
    fill = list(n_posts = 0)) |> 
  mutate(
    week = isoweek(date),
    week_start_date = floor_date(date, "1 week", week_start = 1),
    week_start_date = as_date(week_start_date),
    week_start_month_num = month(week_start_date),
    week_start_month = month(week_start_date, label = TRUE),
    weekday_num = wday(date, label = FALSE, week_start = 1),
    weekday = wday(date, label = TRUE, week_start = 1),
    week = ifelse(week == 1 & week_start_month_num == 12, 53, week)
  ) |> 
  arrange(date)

# Find the week nums for the month labels
df_first_week_of_month <- df_calendar_plot |> 
  group_by(week_start_month) |> 
  summarize(first_week_of_month = min(week))
first_week_of_month <- df_first_week_of_month$first_week_of_month
names(first_week_of_month) <- df_first_week_of_month$week_start_month

```

```{r post-calender-posts, fig.align='center', fig.width=6, fig.height=2.5, fig.retina=TRUE, fig.dpi=300}

df_calendar_plot |> 
  ggplot(aes(week, weekday_num)) +
  geom_tile(
    aes(fill = n_posts),
    height = 0.8, width = 0.8) +
  scale_x_continuous(
    breaks = first_week_of_month,
    expand = c(0, 0)
  ) +
  scale_y_reverse(
    expand = c(0, 0), breaks = 1:7, labels = unique(df_calendar_plot$weekday)) +
  scale_fill_viridis_c(option = "plasma", na.value = "grey80") +
  coord_fixed() +
  guides(fill = guide_legend(
    title = "# of posts", 
    override.aes = list(shape = 22, color = "white", size = 1))) +
  theme_minimal() +
  theme(
    plot.background = element_rect(color = "transparent", fill = "transparent"),
    panel.grid = element_blank(),
    text = element_text(color = "white"),
    axis.text = element_text(color = "white"),
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(hjust = 0, size = 7),
    axis.title = element_blank(),
    legend.position = "bottom",
    legend.justification = "right",
    legend.title = element_text(size = 9),
    legend.text = element_text(size = 9),
    legend.key.width = unit(2, "mm"),
    legend.key.height = unit(2, "mm")
  )

```



```{r main-post-stats}

format_number <- function(x) {
  scales::number(x)
}

# Number of posts
n_posts <- nrow(df_post_stats)
# Number of reactions
n_total_reactions <- sum(df_post_stats$reactions)
# Number of comments
n_total_comments <- sum(df_post_stats$comments)

bgcolor_latex <- sprintf("{HTML}{%s}", str_remove(bgcolor, "#"))


```


\vspace{-20mm}

\newcommand{\transparentcard}[2]{
  \begin{tcolorbox}[colback=cardbgcolor, coltext=white, colframe=cardframecolor, 
  width=0.3\textwidth, height=3.5cm, valign=center, halign=center, boxrule=1pt]
    \Huge\textbf{#1} \\ % Large number
    \vspace{0.5cm}
    \large #2 % Label
  \end{tcolorbox}
}

\begin{center}
\begin{tabular}{ccc} % Create a table with 3 columns for horizontal alignment
  \transparentcard{`{r} format_number(n_posts)`}{Posts} &
  \transparentcard{`{r} format_number(n_total_reactions)`}{Reactions} &
  \transparentcard{`{r} format_number(n_total_comments)`}{Comments} \\
\end{tabular}
\end{center}


\newpage

\begin{center}
\fontsize{24}{6}\selectfont\textbf{Your top posts in `{r} params$year`}
\end{center}
\vspace{-8mm}
\begin{center}
\fontsize{12}{6}\selectfont by number of reactions
\end{center}

\vspace{-10mm}

```{r post-calender-post-engagement, fig.align='center', fig.width=6, fig.height=2.5, fig.retina=TRUE, fig.dpi=300}

df_calendar_plot |> 
  mutate(total_reactions = replace_na(total_reactions, 0)) |> 
  ggplot(aes(week, weekday_num)) +
  geom_tile(
    aes(fill = total_reactions),
    height = 0.8, width = 0.8) +
  scale_x_continuous(
    breaks = first_week_of_month,
    expand = c(0, 0)
  ) +
  scale_y_reverse(
    expand = c(0, 0), breaks = 1:7, labels = unique(df_calendar_plot$weekday)) +
  scale_fill_viridis_c(
    option = "plasma", na.value = "grey80", transform = "pseudo_log",
    breaks = c(0, 1, 3, 5, 10, 30, 100, 300, 1000, 3000, 10000, 30000)) +
  coord_fixed() +
  guides(fill = guide_colorbar(
    title = "# of reactions and comments by posting date (log)", 
    override.aes = list(shape = 22, color = "white", size = 1))) +
  theme_minimal() +
  theme(
    plot.background = element_rect(color = "transparent", fill = "transparent"),
    panel.grid = element_blank(),
    text = element_text(color = "white"),
    axis.text = element_text(color = "white"),
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(hjust = 0, size = 7),
    axis.title = element_blank(),
    legend.position = "bottom",
    legend.justification = "right",
    legend.title = element_text(size = 9),
    legend.text = element_text(size = 9),
    legend.key.width = unit(8, "mm"),
    legend.key.height = unit(2, "mm")
  )

```

\vspace{-10mm}

```{r top3-posts, fig.align='center'}
# Top posts by number of reactions

# Limit the number of characters to be displayed
share_commentary_short_size <- 320

library(emojifont)
medals <- emoji(search_emoji("place_medal"))

df_post_stats |> 
  slice_max(order_by = reactions, n = 3) |> 
  select(date, share_commentary, reactions, comments) |> 
  mutate(
  share_commentary = str_replace_all(share_commentary, "\"", " "),
  share_commentary_short = str_sub(share_commentary, 1, share_commentary_short_size),
  # Replace unicode special characters at the beginning
  #TODO
  share_commentary_short = str_replace_all(share_commentary_short, "[^\u1F600-\u1F64F]", " "),
  share_commentary_short = str_squish(share_commentary_short),
  share_commentary_short = ifelse(
    str_length(share_commentary < share_commentary_short_size),
    paste0(share_commentary_short, "..."),
    share_commentary),
  rank = row_number()
  ) |> 
 ggplot() +
  geom_textbox(
    aes(0, 1, label = share_commentary_short),
    width = 0.9, size = 3.25, fill = NA, color = "white", box.color = NA, vjust = 1,,
    box.padding = unit(0, "mm")
  ) +
  geom_textbox(
    aes(0, 0.1, label = sprintf("**%d** reactions | **%d** comments", reactions, comments)),
    width = 0.9, size = 2.25, fill = NA, color = "white", box.color = NA, vjust = 0,
    box.padding = unit(0, "mm")
  ) +
  coord_cartesian(expand = FALSE, ylim = c(0, 1.1)) +
  facet_wrap(vars(rank), ncol = 1, strip.position = "left") +
  theme_void() +
  theme(
    panel.background = element_rect(color = "#38216B", fill = "#18083E"),
    strip.text = element_text(
      size = 16, face = "bold", color = "white", vjust = 1,
      margin = margin(r = 6)),
    panel.spacing.x = unit(8, "mm"),
    panel.spacing.y = unit(4, "mm")
  )
```


\newpage

\begin{center}
\fontsize{24}{6}\selectfont\textbf{Your top posts in `{r} params$year` per month}
\end{center}
\vspace{-10mm}
\begin{center}
\fontsize{12}{6}\selectfont by number of reactions
\end{center}

```{r top-posts-per-month, fig.width=7.5, fig.height=6, fig.align='center'}
# Top posts per month (based on reactions)
share_commentary_short_size <- 180

df_post_stats |> 
  group_by(month) |> 
  slice_max(order_by = reactions, n = 1, with_ties = FALSE) |> 
  ungroup() |> 
  mutate(
    share_commentary = str_replace_all(share_commentary, "\"", " "),
    share_commentary_short = str_sub(share_commentary, 1, share_commentary_short_size),
    # Replace unicode special characters at the beginning
    #TODO
    share_commentary_short = str_replace_all(share_commentary_short, "[^\u1F600-\u1F64F]", " "),
    share_commentary_short = str_squish(share_commentary_short),
    share_commentary_short = ifelse(
      str_length(share_commentary < share_commentary_short_size),
      paste0(share_commentary_short, "..."),
      share_commentary),
    rank = row_number()
  ) |>
  ggplot() +
  geom_textbox(
    aes(0, 1.2, label = share_commentary_short),
    width = 0.9, size = 3.25, fill = NA, color = "white", box.color = NA, vjust = 1,
    box.padding = unit(1, "mm")
  ) +
  geom_textbox(
    aes(0, 0, label = sprintf("**%d** reactions | **%d** comments", reactions, comments)),
    width = 0.9, size = 2.25, fill = NA, color = "white", box.color = NA, vjust = 0,
    box.padding = unit(1, "mm")
  ) +
  coord_cartesian(expand = FALSE, ylim = c(-0.1, 1.2)) +
  facet_wrap(vars(month), ncol = 2, strip.position = "left") +
  theme_void() +
  theme(
    panel.background = element_rect(color = "#38216B", fill = "#18083E"),
    strip.text = element_text(
      size = 16, face = "bold", color = "white", vjust = 1,
      margin = margin(r = 6)),
    panel.spacing.y = unit(4, "mm")
  )


```


\newpage

\begin{center}
\fontsize{24}{6}\selectfont\textbf{Your consistency stats}
\end{center}


```{r post-streaks}
# Longest daily streak
longest_streak_length_days <- df_post_stats |> 
  distinct(date) |> 
  arrange(date) |> 
  mutate(
    diff_last_post = difftime(date, lag(date, 1, default = first(date)), units = "days"),
    diff_last_post = as.integer(diff_last_post),
    new_streak = ifelse(diff_last_post > 1, 1, 0),
    streak_id = cumsum(new_streak)
  ) |> 
  group_by(streak_id) |> 
  summarize(
    streak_length = n(),
    streak_start_date = min(date)) |> 
  slice_max(order_by = streak_length, n = 1, with_ties = FALSE) |> 
  pull(streak_length)

# Longest weekly streak
longest_streak_length_weeks <- df_post_stats |> 
  mutate(week = floor_date(date, "1 week", week_start = 1)) |> 
  distinct(week) |> 
  arrange(week) |> 
  mutate(
    diff_last_post = difftime(week, lag(week, 1, default = NA), units = "weeks"),
    diff_last_post = as.integer(diff_last_post),
    new_streak = ifelse(diff_last_post > 1, 1, 0),
    streak_id = cumsum(new_streak)
  ) |> 
  group_by(streak_id) |> 
  summarize(
    streak_length = n(),
    streak_start_date = min(week)) |> 
  slice_max(order_by = streak_length, n = 1, with_ties = FALSE) |> 
  pull(streak_length)

```


\begin{center}
\begin{tabular}{cc}
  \transparentcard{`{r} longest_streak_length_days`}{Longest Daily Streak} &
  \transparentcard{`{r} longest_streak_length_weeks`}{Longest Weekly Streak} \\
\end{tabular}
\end{center}


```{r posts-per-month, fig.height=2.25, fig.align='center'}
df_post_stats |> 
  group_by(month) |> 
  summarize(n_posts = n()) |> 
  ggplot(aes(month, n_posts)) +
  geom_col(fill = fill_gradient_yellow, width = default_bar_width) +
  labs(
    title = "Number of posts by month",
    x = NULL, y = NULL
  ) +
  custom_theme()  

```

\vspace{-4mm}

```{r posts-engagements-per-month, fig.height=2.25, fig.align='center'}
df_post_stats |> 
  group_by(month) |> 
  summarize(n_engagements = sum(reactions) + sum(comments)) |> 
  ggplot(aes(month, n_engagements)) +
  geom_col(fill = fill_gradient_pink, width = default_bar_width) +
  labs(
    title = "Number of engagements by month",
    subtitle = "Reactions and comments",
    x = NULL, y = NULL
  ) +
  custom_theme()

```



\newpage

\begin{center}
\fontsize{24}{6}\selectfont\textbf{Your posting timings}
\end{center}

\vspace{10mm}


```{r posts-per-hour, fig.height=2.5, fig.align='center'}
df_post_stats |> 
  mutate(hour = hour(datetime)) |> 
  group_by(hour) |> 
  summarize(n_posts = n()) |> 
  ggplot(aes(hour, n_posts)) +
  geom_col(fill = fill_gradient_yellow, width = default_bar_width) +
  scale_x_continuous(breaks = seq(0, 23, 2)) +
  coord_cartesian(xlim = c(0, 23)) +
  labs(
    title = "Number of posts by hour of day",
    subtitle = "Time in UTC",
    x = NULL, y = NULL
  ) +
  custom_theme()  

```

\vspace{4mm}

```{r posts-engagements-per-hour, fig.height=2.5, fig.align='center'}
df_post_stats |> 
  mutate(hour = hour(datetime)) |> 
  group_by(hour) |> 
  summarize(avg_engagements = mean(reactions) + mean(comments)) |> 
  ggplot(aes(hour, avg_engagements)) +
  geom_col(fill = fill_gradient_pink, width = default_bar_width) +
  scale_x_continuous(breaks = seq(0, 23, 2)) +
  coord_cartesian(xlim = c(0, 23)) +
  labs(
    title = "Average engagements per post by hour of posting",
    subtitle = "Reactions and comments, time in UTC",
    x = NULL, y = NULL
  ) +
  custom_theme()

```


\newpage

\begin{center}
\fontsize{24}{6}\selectfont\textbf{Your posting days}
\end{center}

\vspace{10mm}


```{r posts-per-day-of-week, fig.height=2.5, fig.align='center'}
df_post_stats |> 
  mutate(wday = wday(date, label = TRUE, week_start = 1)) |> 
  group_by(wday) |> 
  summarize(n_posts = n()) |> 
  ggplot(aes(wday, n_posts)) +
  geom_col(fill = fill_gradient_yellow, width = default_bar_width) +
  labs(
    title = "Number of posts by day of week",
    x = NULL, y = NULL
  ) +
  custom_theme()  

```

\vspace{4mm}

```{r posts-engagements-per-day-of-week, fig.height=2.5, fig.align='center'}
df_post_stats |> 
   mutate(wday = wday(date, label = TRUE, week_start = 1)) |> 
  group_by(wday) |> 
  summarize(avg_engagements = mean(reactions) + mean(comments)) |> 
  ggplot(aes(wday, avg_engagements)) +
  geom_col(fill = fill_gradient_pink, width = default_bar_width) +
  labs(
    title = "Average engagements per post by day of week of posting",
    subtitle = "Reactions and comments",
    x = NULL, y = NULL
  ) +
  custom_theme()

```


\newpage

\begin{center}
\fontsize{24}{6}\selectfont\textbf{LinkedIn Wrapped}
\end{center}

\vspace{48mm}

\begin{center}
Created with R and Quarto.
\end{center}
\begin{center}
\href{https://github.com/bydata/linkedin-wrapped}{\color{linktextcolor}{github.com/bydata/linkedin-wrapped}}
\end{center}

\begin{center}
by Ansgar Wolsing (2024)
\end{center}
